#ifndef TENSOR_H
#define TENSOR_H

#include <stdlib.h>

typedef struct {
    float *data;
    int   ndim;
    int  *shape;
    int  *stride;
    size_t size;
} Tensor;

Tensor *tensor_new(int ndim, const int *shape);

void tensor_add_cuda(Tensor *out, Tensor *A, Tensor *B, size_t chunk_size=256);
void tensor_sub_cuda(Tensor *out, Tensor *A, Tensor *B, size_t chunk_size=256);
void tensor_scale_cuda(Tensor *out, Tensor *A, float alpha, size_t chunk_size=256);
void tensor_mul_cuda(Tensor *out, Tensor *A, Tensor *B, size_t chunk_size=256);
void tensor_matmul_cuda(Tensor *out, const Tensor *A, const Tensor *B, size_t chunk_size=256);

Tensor* tensor_ones_cuda(int ndim, const int *shape, size_t chunk_size=256);
Tensor* tensor_zeros_cuda(int ndim, const int *shape, size_t chunk_size=256);
Tensor* tensor_rand_cuda(int ndim, const int *shape, size_t chunk_size=256);

void tensor_relu_cuda(Tensor *X, size_t chunk_size=256);
Tensor* tensor_relu_backward_cuda(const Tensor *pre, const Tensor *dA, size_t chunk_size=256);
void tensor_gelu_cuda(const Tensor *X, Tensor *Y, size_t chunk_size=256);
Tensor* tensor_gelu_backward_cuda(const Tensor *X, const Tensor *dY, size_t chunk_size=256);

void tensor_transpose_cuda(const Tensor *A, Tensor *T, int dim0, int dim1);
Tensor* tensor_reshape(const Tensor *A, int ndim, const int *new_shape);

void tensor_free(Tensor *t);
void cuda_get_info();

void tensor_show(Tensor *t);

#endif